{"version":3,"sources":["context/todo.actions.js","context/todo.reducer.js","context/TodoContextProvider.jsx","components/Header.jsx","config/appConfig.js","config/firebaseConfig.js","services/firebaseApi.js","components/TodoInput.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["setTodos","todos","type","data","todoReducer","state","action","id","description","after_deleted","updated","new_description","initialState","TodoContext","createContext","TodoContextProvider","children","useReducer","dispatch","Provider","value","Header","data-cy","require","config","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fireStore","firestore","firebaseApi","fetchTodos","a","collection","get","docs","forEach","item","addTodo","doc","set","updateTodo","update","deleteTodo","delete","TodoInput","useState","inputValue","setInputValue","useContext","className","onChange","target","placeholder","size","shape","onClick","uuidv4","TodoTask","props","TodoList","useEffect","handleDeleteTodo","handleUpdateTodo","Object","entries","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05837d9a.chunk.js","sourcesContent":["export const SET_TODOS = \"SET_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\"\nexport const UPDATE_TODO = \"UPDATE_TODO\"\n\nexport const setTodos = (todos) => ({ type: SET_TODOS, data: todos });\nexport const addTodo = (id, description) => ({\n  type: ADD_TODO,\n  data: { id, description },\n});\nexport const deleteTodo = (id) => ({\n  type: DELETE_TODO,\n  data: { id }\n})\nexport const updateTodo = (id, new_description) => ({\n  type: UPDATE_TODO,\n  data: { id, new_description }\n})","// The one that actually perform the action\nimport { SET_TODOS, ADD_TODO, DELETE_TODO, UPDATE_TODO } from \"./todo.actions\";\n\nexport const todoReducer = (state, action) => {\n  const { type, data } = action;\n  //Type identify what is the action to do\n  switch (type) {\n    case SET_TODOS:\n      return { ...state, todos: data };\n    case ADD_TODO:\n      const todos = {\n        ...state.todos,\n        [data.id]: { description: data.description },\n      };\n      return { ...state, todos };\n    case DELETE_TODO:\n      \n      // To delete based on id\n      // If null, will define with data which is an initialized Object\n      delete state.todos[data.id];\n      const after_deleted = state.todos || data;\n\n      return {\n        ...state, //spread operator: do a copy of state.todos\n        todos: after_deleted\n      }\n    case UPDATE_TODO:\n      const updated = {\n        ...state.todos,\n        [data.id]: { description: data.new_description }\n      }\n      return { ...state, updated };\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from \"react\";\nimport { todoReducer } from \"./todo.reducer\";\n\nconst initialState = { todos: {} };\nexport const TodoContext = createContext(initialState);\n\nexport const TodoContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(todoReducer, initialState);\n  return (\n    <TodoContext.Provider value={{ state, dispatch }}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n// Like API ","import React from \"react\";\n\nexport const Header = () => <h1 data-cy=\"header\">TODO</h1>;\n","require(\"dotenv\").config();\n\nexport const config = {\n\tfirebase: {\n\t\tapiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n\t\tauthDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n\t\tdatabaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n\t\tprojectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n\t\tstorageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n\t\tmessagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n\t\tappId: process.env.REACT_APP_FIREBASE_APP_ID,\n\t}\n};\n","import firebase from \"firebase/app\";\n// Required for side-effects\nimport \"firebase/firestore\";\nimport { config } from \"./appConfig\";\n\nfirebase.initializeApp(config.firebase);\n\n//firebase has a lot of methods, the one used is firestore()\nexport const fireStore = firebase.firestore();","import { fireStore } from \"../config/firebaseConfig\";\n\nconst COLLECTION_NAME = \"todo-list\";\n\nconst fetchTodos = async () => {\n\tconst todos = {};\n\t(await fireStore.collection(COLLECTION_NAME).get()).docs.forEach((item) => {\n\t\ttodos[item.id] = item.data();\n\t});\n\treturn todos;\n}\n\nconst addTodo = async (id, description) => {\n\treturn await fireStore.collection(COLLECTION_NAME).doc(id).set({ description });\n}\n\nconst updateTodo = async (id, description) => {\n\treturn await fireStore.collection(COLLECTION_NAME).doc(id).update({ description });\n}\n\nconst deleteTodo = async (id) => {\n\treturn await fireStore.collection(COLLECTION_NAME).doc(id).delete();\n}\n\nexport const firebaseApi = {\n\tfetchTodos,\n\taddTodo,\n\tupdateTodo,\n\tdeleteTodo,\n}","import { Button, Input } from \"antd\";\nimport React, { useContext, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { addTodo } from \"../context/todo.actions\";\nimport { TodoContext } from \"../context/TodoContextProvider\";\nimport { firebaseApi } from \"../services/firebaseApi\";\n\n//Should you call before dispatch or after?\n// Call API when you dispatch the item, should I put API in reducer?\n// Management of the state, should be light\n\nexport const TodoInput = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  //Tie by the the context\n  const { dispatch } = useContext(TodoContext);\n\n  const handleAddClick = () => {\n    const id = uuidv4();\n    dispatch(addTodo(id, inputValue));\n    firebaseApi.addTodo(id, inputValue);\n    setInputValue(\"\");\n  }\n\n  return (\n    <div className=\"todo-input\">\n      <Input\n        value={inputValue}\n        onChange={({ target: { value } }) => setInputValue(value)}\n        placeholder=\"Add a TODO\"\n        size=\"large\"\n        className=\"todo-input__input\"\n        data-cy=\"todo-input__input\"\n      />\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        onClick={handleAddClick}\n        className=\"todo-input__button\"\n        data-cy=\"todo-input__button\"\n      >\n        Add\n      </Button>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { deleteTodo, updateTodo, setTodos } from \"../context/todo.actions\";\nimport { TodoContext } from \"../context/TodoContextProvider\";\nimport { firebaseApi } from \"../services/firebaseApi\";\n\n// //Use of context?\n// const ToggleContext = React.createContext(\"read\");\n\n// // Using a Component will be easier to define the behavior/state\n// class Toggle extends React.Component{\n\n// }\n\n\nconst TodoTask = (props) => {\n  // const [inputValue, setInputValue] = useState(\"\");\n  \n  // //Setting the state to be readMode\n  // const [readMode, setReadMode] = useState(true);\n\n  // //Store into a variable\n  // let todoItem = <div className=\"todo-task__name\" data-cy=\"todo-task__name\"> {props.description} </div>;\n\n  // //If readMode is not true\n  // if(!readMode){\n  //   todoItem =<Input\n  //   value={inputValue}\n  //   onChange={({ target: { value } }) => setInputValue(value)}\n  //   placeholder=\"Add a TODO\"\n  //   size=\"large\"\n  //   className=\"todo-input__input\"\n  //   data-cy=\"todo-input__input\"\n  //   />\n  // }\n\n\n  return (\n    <div className=\"todo-task\">\n      {/* <Toggle /> */}\n      <div className=\"todo-task__name\" data-cy=\"todo-task__name\">\n        {props.description}\n      </div>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        className=\"todo-task__button\"\n        data-cy=\"todo-task__button-update\"\n        onClick={() => {}}\n      >\n        Update\n      </Button>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        className=\"todo-task__button\"\n        data-cy=\"todo-task__button-delete\"\n        onClick={() => props.delete(props.id)}\n      >\n        Delete\n      </Button>\n    </div>\n  );\n};\n\n// A list of TODOS \nexport const TodoList = () => {\n  // The state returns the list of todos; // unpackage the functions\n  // dispatch is a function\n  const { state, dispatch } = useContext(TodoContext);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      //Set the todos as retrieved from Firebase\n      const todos = await firebaseApi.fetchTodos();\n      dispatch(setTodos(todos));\n    }\n\n    fetchTodos();\n  }, [dispatch]);\n\n  const handleDeleteTodo = (id) => {\n    // TODO: fill in\n    dispatch(deleteTodo(id));\n    firebaseApi.deleteTodo(id);\n  };\n\n  const handleUpdateTodo = (id, new_description) => {\n    dispatch(updateTodo(id, new_description));\n    firebaseApi.updateTodo(id, new_description);\n  };\n\n  return (\n    <div className=\"todo-list\" data-cy=\"todo-list\">\n      {Object.entries(state.todos).map(([id, todo]) => (\n        <TodoTask\n          key={id}\n          description={todo.description}\n          update={handleUpdateTodo}\n          delete={handleDeleteTodo}\n          id={id}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { TodoContextProvider } from \"./context/TodoContextProvider\";\nimport { Header } from \"./components/Header\";\nimport { TodoInput } from \"./components/TodoInput\";\nimport { TodoList } from \"./components/TodoList\";\n\nconst App = () => {\n  //Only component that is in the ContextProvider will have access to the context\n  return (\n    <div className=\"app\">\n      <Header />\n      <TodoContextProvider> \n        <TodoInput />\n        <TodoList /> \n      </TodoContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './config/firebaseConfig'; //Connect frontend to backend\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}